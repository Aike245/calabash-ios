require 'fileutils'
require 'luffa'
require 'run_loop'

require 'bundler'
Bundler::GemHelper.install_tasks

begin
  require 'rspec/core/rake_task'
  RSpec::Core::RakeTask.new(:spec)

  RSpec::Core::RakeTask.new(:unit) do |task|
    task.pattern = 'spec/lib/**{,/*/**}/*_spec.rb'
  end
rescue LoadError => _
end

begin
  require 'yard'
  YARD::Rake::YardocTask.new do |t|
    # see .yardopts for options
  end
rescue LoadError => _
end

# Builds and installs the Objective-C libraries that this gem requires.
#
# * staticlib/calabash.framework.zip
# * staticlib/libFrankCalabash.a
# * dylibs/libCalabashDyn.dylib
# * dylibs/libCalabashDynSim.dylib
#
# Expects that the calabash-ios-server source code is located in:
#  `../../calabash-ios-server.` If your server source code is in a different
# location, you can use the `CALABASH_SERVER_PATH` variable to specify an
# alternative location.
#
# @example Build the server libraries.
#  $ bundle
#  $ rake build_server
#
# @example Using `CALABASH_SERVER_PATH` to point to alternative server sources.
#  $ bundle
#  $ CALABASH_SERVER_PATH=/your/path rake build_server
desc 'Build and install the Objective-C libraries that this gem requires.'
task :build_server do

  if Module.method_defined?('gem')
    raise %Q{\033[31m
Bundle exec detected!

This command cannot be run in the context of bundle exec.

Please run again without bundle exec.
\033[0m
}
  end

  banner 'Preparing'

  calabash_server_dir = find_server_repo_or_raise

  expect_server_is_on_master_branch(calabash_server_dir)

  log_warning_about_skipping_dylibs

  gem_lib_dirs = prepare_gem_library_directories
  gem_static_libs_dir = gem_lib_dirs[:static_libs]
  gem_dylibs_dir = gem_lib_dirs[:dylibs]

  Dir.chdir(calabash_server_dir) do
    banner 'Cleaning'

#    unless system('make', 'clean')
#      Luffa.log_error("There was an error executing 'make clean'")
#      exit 1
#    end

    unless system('make', 'framework')
      Luffa.log_error("There was an error executing 'make framework'")
      exit 1
    end

    source = File.expand_path('./calabash.framework')
    target = File.join(gem_static_libs_dir, 'calabash.framework.zip')
    args = ['ditto', '-c', '-k', '--rsrc', '--sequesterRsrc', '--keepParent',
            source, target]

    Luffa::Debug.with_debugging do
      RunLoop::Xcrun.new.exec(args, {log_cmd: true})
    end

    unless File.exist?(target)
      Luffa.log_error('There was a problem archiving the calabash.framework.zip to ./staticlib')
      exit 1
    end

    Luffa.log_pass('Installed framework to ./staticlib/calabash.framework.zip')

    unless system('make', 'frank')
      Luffa.log_error("There was an error executing 'make frank'")
      exit 1
    end

    source = File.expand_path('./libFrankCalabash.a')
    target = File.join(gem_static_libs_dir, 'libFrankCalabash.a')
    args = ['ditto', source, target]

    Luffa::Debug.with_debugging do
      RunLoop::Xcrun.new.exec(args, {log_cmd: true})
    end

    unless File.exist?(target)
      Luffa.log_error('There was a problem archiving the libFrankCalabash.a to ./staticlib')
      exit 1
    end

    Luffa.log_pass('Installed frank plugin to ./staticlib/libFrankCalabash.a')

    if Luffa::Environment.travis_ci?
      Luffa.log_warn('Skipping dylib creation on Travis CI; no codesigning environment')
      exit 0
    end

    unless system('make', 'dylibs')
      Luffa.log_fail("There was an error executing 'make dylibs'")
      exit 1
    end

   ['libCalabashDynSim.dylib',
    'libCalabashDyn.dylib',
    'libCalabashDynFAT.dylib'].each do |dylib|

      source = File.join('calabash-dylibs', dylib)
      target = File.join(gem_dylibs_dir, dylib)
      args = ['ditto', source, target]

      Luffa::Debug.with_debugging do
        RunLoop::Xcrun.new.exec(args, {log_cmd: true})
      end

      unless File.exist?(target)
        Luffa.log_fail('There was a problem archiving the libFrankCalabash.a to ./staticlib')
        exit 1
      end

      Luffa.log_pass("Installed #{dylib} to #{source}")
    end
  end

  banner('Visual Confirmation')
  if `which tree`.chomp != ''
    system('tree', '-s', 'staticlib')
    system('tree', '-s', 'dylibs')
  else
    system('ls', '-hal', 'staticlib')
    system('ls', '-hal', 'dylibs')
  end

  Luffa.log_pass('Done!')
end

def banner(log)
   puts "\033[35m\n####### #{log} ########\n\033[0m"
end

def find_server_repo_or_raise
  calabash_server_dir = ENV['CALABASH_SERVER_PATH'] || File.join('..', '..', 'calabash-ios-server')
  unless File.exist?(calabash_server_dir)
    raise %Q{
Unable to find calabash server checked out at #{calabash_server_dir}.
Please checkout as #{calabash_server_dir} or set CALABASH_SERVER_PATH to point
to the Calabash server.
}
  end
  calabash_server_dir
end

def expect_server_is_on_master_branch(calabash_server_dir)
  branch = `git -C #{calabash_server_dir} rev-parse --abbrev-ref HEAD`.chomp
  unless branch == 'master'
    raise %Q{
Expected git branch of repo #{calabash_server_dir} to be 'master' but found
'#{branch}'.  The server must be built from the master branch."
}
  end
end

def log_warning_about_skipping_dylibs
  skip_dylibs = ENV['CALABASH_NO_DYLIBS'] == '1'
  if skip_dylibs
    Luffa.log_warn('CALABASH_NO_DYLIBS is deprecated since 0.16.4')
    Luffa.log_warn('This rake task is for building for release.')
    Luffa.log_warn('The gem cannot be built without the dylibs.')
    Luffa.log_warn('Ignoring CALABASH_NO_DYLIBS=1')
  end
end

def prepare_gem_library_directories
  static_libs_dir = File.expand_path('staticlib')
  FileUtils.rm_rf static_libs_dir
  FileUtils.mkdir_p static_libs_dir

  dylibs_dir = File.expand_path('dylibs')
  FileUtils.rm_rf dylibs_dir
  FileUtils.mkdir_p dylibs_dir

  {
    static_libs: static_libs_dir,
    dylibs: dylibs_dir
  }
end

